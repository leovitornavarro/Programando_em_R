- Class: meta
  Course: Programando em R
  Lesson: Conceitos Básicos
  Author: Nick Carchedi (Tradução por Leo Vitor Navarro)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Trabalharemos, nesta lição, com alguns dos conceitos base da programação em R.

- Class: text
  Output: Se, a qualquer momento, você desejar saber mais sobre uma informação relacionada ao R,
    digite help.start() e um menu de opções será aberto (dentro do RStudio ou
    em seu navegador padrão, dependendo de sua configuração). Outra maneira é uma simples busca
    na internet, geralmente você encontrará pelo que estiver buscando.

- Class: cmd_question
  Output: Em sua forma mais básica, o R pode ser usado como uma calculadora. Digite 5 + 7 e aperte Enter.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Digite 5 + 7 e aperte Enter.

- Class: text
  Output: O R simplesmente retorna o resultado 12. No entanto, o R é uma linguagem de programação
    e o motivo de a usarmos em vez de uma calculadora é para automatizar algum processo
    ou evitar repetições cansativas e desnecessárias.

- Class: text
  Output: Nesse caso, talvez gostaríamos de utilizar a resposta anterior em um segundo cálculo.
    Em vez de digitar 5 + 7 toda vez que precisarmos, podemos criar uma nova variável
    que contenha o resultado.

- Class: text
  Output: A forma de atribuir um valor a uma variável no R é utilizando o operador de atribuição,
    o qual é constituído por um hífen seguido do sinal de menos. Isto é '<-'

- Class: text
  Output: Imagine que o operador de atribuição é uma flecha. Você está atribuindo o valor
    do lado direito da flecha à variável do lado esquerdo. 

- Class: cmd_question
  Output: Para atribuir o valor de 5 + 7 a uma variável de nome x, você deve digitar
    x <- 5 + 7. Pode-se ler essa operação como '5 + 7 é atribuído a x'. Tente o comando agora.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Digite x <- 5 + 7. Atente-se pois não se deve colocar um espaço entre os símbolos
      `<` e `-` que formam a flecha!

- Class: text
  Output: Você notará que o R não retornou o resultado 12 dessa vez. Quando você
    usa o operador de atribuição, o R assume que você não deseja ver o resultado
    imediatamente, mas que você deseja usá-lo para algo diferente posteriormente. 

- Class: cmd_question
  Output: Para ver o conteúdo da variável x, apenas digite x e aperte Enter. Tente
    agora.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Digite x e aperte Enter. O valor de x será imediatamente retornado.

- Class: cmd_question
  Output: Agora, atribua o valor de x - 3 a uma nova variável de nome y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Digite y <- x - 3 e aperte Enter. Utilizar x - 3 ou x-3 será uma escolha pessoal sua.

- Class: cmd_question
  Output: Qual o valor de y? Digite y para descobrir.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Digite y e aperte Enter.

- Class: text
  Output: Agora, vamos criar uma pequena coleção de números chamada de vetor.
    Qualquer objeto que contenha dados (data) constitui um 'conjunto de dados' (data structure),
    e vetores numéricos são os conjuntos de dados mais simples do R. Na verdade, até mesmo 
    um número sozinho é considerado um vetor de tamanho um.

- Class: cmd_question
  Output: A forma mais simples de se criar um vetor é utilizando a função c(), a qual
    denota 'concatenar' ou 'combinar'. Para criar um vetor que contenha os números 1.1,
    9, e 3.14, digite c(1.1, 9, 3.14). Tente agora e atribua o valor a uma variável chamada z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: Digitar z <- c(1.1, 9, 3.14) atribuirá o vetor (1.1, 9, 3.14) a
    uma nova variável de nome z. Incluir espaços após os elementos não é necessário,
    mas pode tornar seu script mais limpo e legível.

- Class: cmd_question
  Output: Toda vez que você tiver alguma dúvida sobre determinada função, você pode acessar o banco
    de dados de ajuda do R através do comando `?`. Por exemplo, se você quiser mais informações sobre
    a função c(), digite ?c sem os parênteses que normalmente seguem uma função. Tente agora.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Digite ?c e aperte Enter. Isso abrirá o arquivo de ajuda para a função c().

- Class: cmd_question
  Output: Digite z para ver seu conteúdo. Note que não há nenhuma aspas separando 
    os valores na resposta.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Digite z e aperte Enter.

- Class: cmd_question
  Output: Você pode combinar vetores a fim de construir um novo vetor maior. Crie um novo vetor que contenha
    z, 555 e, então, z novamente, nessa ordem. Não atribua esse vetor a uma nova variável para
    podermos ver o resultado imediatamente.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Digite c(z, 555, z). Não cria uma nova variável. Só queremos ver o resultado.

- Class: cmd_question
  Output: Vetores numéricos podem ser usados em expressões aritméticas. Digite a expressão seguinte para ver o que acontece z * 2 + 100.
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Digite z * 2 + 100, sem atribuir o resultado a uma nova variável. O símbolo `*` 
    é utilizado para multiplicação e está junto ao 8 em muitos teclados.

- Class: text
  Output: Primeiramente, o R multiplicou cada elemento de z por 2. Depois,
    ele adicionou 100 a cada elemento para formar os resultados acima.

- Class: text
  Output: Outros operadores aritméticos comuns são `+`, `-`, `/`, e `^` (x^2
    significa 'x ao quadrado'). Para determinar a raiz quadrada, use a função sqrt() e 
    para determinar o valor absoluto use a função abs().

- Class: cmd_question
  Output: Determine a raiz quadrada de z - 1 e a atribua a uma nova variável chamada my_sqrt.
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: Atribua o resultado de sqrt(z - 1) a uma variável chamada my_sqrt.

- Class: mult_question
  Output: O que você acha que my_sqrt contém? 
  CorrectAnswer: "um vetor de tamanho 3"
  AnswerChoices: "um vetor de tamanho 3; um único número (isto é, um vetor de tamanho 1); um vetor de tamanho 0 (isto é, um vetor vazio)"
  AnswerTests: omnitest(correctVal='um vetor de tamanho 3')
  Hint: Pense em como o R lidou com as outras operações ''vetorizadas'', elemento por elemento.

- Class: cmd_question
  Output: Veja o conteúdo de my_sqrt.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Digite my_sqrt e aperte Enter.

- Class: text
  Output: Como você pode ter imaginado, o R primeiramente subtraiu 1 de cada elemento de z, depois
    determinou a raiz quadrada de cada elemento. O vetor final possui, então, o mesmo tamanho
    do vetor z original.

- Class: cmd_question
  Output: Agora, crie uma nova variável chamada my_div e a atribua o valor de z dividido
    por my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: Digite my_div <- z / my_sqrt.

- Class: mult_question
  Output: Qual das afirmações é verdadeira?
  CorrectAnswer: "O primeiro elemento de my_div é igual ao primeiro elemento de z dividido pelo primeiro elemento de my_sqrt e o mesmo para os próximos"
  AnswerChoices: "O primeiro elemento de my_div é igual ao primeiro elemento de z dividido pelo primeiro elemento de my_sqrt, e o mesmo para os próximos; my_div é um único número (isto é, um vetor de tamanho 1); my_div é indefinido"
  AnswerTests: omnitest(correctVal='O primeiro elemento de my_div é igual ao primeiro elemento de z dividido pelo primeiro elemento de my_sqrt e o mesmo para os próximos')
  Hint: Pense em como o R lidou com as outras operações 'vetorizadas' como `+` e `*`.

- Class: cmd_question
  Output: Veja o conteúdo de my_div.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Digite my_div e aperte Enter.

- Class: text
  Output: Quando é dado ao R dois vetores do mesmo tamanho, ele simplesmente realiza a operação
    aritmética especificada (`+`, `-`, `*`, etc.) elemento por elemento. Se os vetores
    forem de tamanhos diferentes, o R 'recicla' o vetor mais curto até ele se tornar do mesmo tamanho que o vetor maior.

- Class: text
  Output: Quando operamos z * 2 + 100 em nosso exemplo anterior, z era um vetor de tamanho
    3, mas tecnicamente 2 e 100 são cada um vetores de tamanho 1.

- Class: text
  Output: Basicamente, o R está "reciclando" o 2 para fazer um vetor de vários 2 e
    o 100 para fazer um vetor de vários 100. Em outras palavras, quando você comando o R para computar z
    * 2 + 100, o que ele realmente computa é z * c(2, 2, 2) + c(100, 100, 100).

- Class: cmd_question
  Output: A fim de observar outro exemplo de como funciona essa 'reciclagem' de vetores, tente somar
    c(1, 2, 3, 4) e c(0, 10). Não se preocupe em atribuir o resultado a uma nova variável.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Digite c(1, 2, 3, 4) + c(0, 10) no console para ver como o R soma dois vetores
    de tamanho diferente. Não atribua o resultado a uma variável.

- Class: text
  Output: Se o tamanho do vetor menor não é divisível equitativamente pelo tamanho do vetor maior,
    o R irá simplesmente aplicar o método de "reciclagem", mas retornará um aviso
    de que algo pode não estar indo muito bem.

- Class: cmd_question
  Output: Tente c(1, 2, 3, 4) + c(0, 10, 100), por exemplo.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Digite c(1, 2, 3, 4) + c(0, 10, 100) para ver como o R manuseia a soma de dois vetores,
    nos quais o tamanho do vetor menor não é divisível equitativamente pelo tamanho do vetor maior.
    Não atribua o valor a uma variável.

- Class: text
  Output: Antes de concluir a lição, gostaria de mostrar alguns truques para ganhar tempo.

- Class: text
  Output: Anteriormente, você computou z * 2 + 100. Vamos fingir que você cometeu um equívoco e que, na verdade, você gostaria de ter somado 1000 em vez de 100. Você poderia digitar a expressão novamente ou...

- Class: cmd_question
  Output: Em muitos ambientes de programação, a seta para cima retorna os comandos anteriores. Tente apertar a seta para cima em seu teclado até retornar a esse comando z * 2 + 100, então mude 100 para 1000 e pressione Enter. Caso a seta não funcione para você, apenas digite o comando.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: Se o ambiente não for compatível com a seta para cima, digite o comando.

- Class: text
  Output: Por último, vamos fingir que você deseja ver o conteúdo de uma variável que você criou anteriormente, mas você não se lembre se a nomeou de my_div ou myDiv. Você poderia tentar as duas formas e ver qual funciona, ou...

- Class: cmd_question
  Output: Você pode digitar as duas primeiras letras do nome da variável, então apertar Tab (possivelmente mais de uma vez). A maioria dos ambientes de programação retornará uma lista de variáveis que começam com 'my'. Essa função se chama 'preenchimento automático' e é muito útil quando se manuseia muitas variáveis. Tente agora. (Se o preenchimento automático não funcionar para você, apenas digite my_div e pressione Enter.)
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Se o preenchimento automático não funcionar, digite my_div e aperte Enter.
